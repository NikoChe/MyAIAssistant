from telegram import Update, BotCommand
from telegram.ext import ContextTypes
from models import Client, Session
from core import app
from notifier import is_owner, is_manager
from datetime import datetime

__all__ = ["sessions_command", "set_bot_commands"]

async def sessions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not (is_owner(user_id) or is_manager(user_id)):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    with app.app_context():
        sessions = Session.query.order_by(Session.created_at.desc()).limit(10).all()
        if not sessions:
            await update.message.reply_text("‚ùóÔ∏è–°–µ—Å—Å–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        messages = []
        for s in sessions:
            client = Client.query.get(s.client_id)
            answers_formatted = "\n\n".join(
                f"‚ùì <b>{q}</b>\nüü¢ {a}" for q, a in s.answers_json.items()
            )

            messages.append(
                f"üë§ <b>{client.name}</b> (@{client.username})\n"
                f"üóÇ –¢–∏–ø: <code>{s.session_type}</code>\n"
                f"üìÖ –í—Ä–µ–º—è: <code>{s.created_at.strftime('%Y-%m-%d %H:%M')}</code>\n\n"
                f"{answers_formatted}"
            )

        await update.message.reply_text("\n\n".join(messages), parse_mode="HTML")


async def set_bot_commands(bot):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("sessions", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∞–¥–º–∏–Ω)"),
        BotCommand("admin", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤"),
        BotCommand("version_import", "–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ default.json"),
        BotCommand("version_export", "–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"),
        BotCommand("upload_questions", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ñ–∞–π–ª)")  # üî• –¥–æ–±–∞–≤–ª–µ–Ω–æ
    ]
    await bot.set_my_commands(commands)
