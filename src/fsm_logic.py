from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from models import Client, Session
from core import db, app
from notifier import notify_admins

SELECT_TYPE, ANSWERING, CONFIRMING = range(3)

session_questions = {
    "free": {
        "intro": "üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è ‚Äî —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞, –≥–¥–µ –º—ã —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å.",
        "questions": [
            "–ö–∞–∫–æ–π –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å. –ß—Ç–æ —Å–µ–π—á–∞—Å –º–µ—à–∞–µ—Ç –∏–ª–∏ –±–µ—Å–ø–æ–∫–æ–∏—Ç?",
            "–ö–∞–∫ —ç—Ç–æ –º–µ—à–∞–µ—Ç –≤ –∂–∏–∑–Ω–∏?",
            "–ë—ã–ª –ª–∏ –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–ª–∏?"
        ]
    },
    "paid": {
        "intro": "üí∞ –ü–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
        "questions": [
            "–ö–∞–∫–æ–π –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é?",
            "–ö–∞–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?",
            "–ë—ã–ª –ª–∏ –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–ª–∏?"
        ]
    },
    "vip": {
        "intro": "üëë VIP —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –º–∞—Å—à—Ç–∞–±.",
        "questions": [
            "–ö–∞–∫–æ–π –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?",
            "–ö–∞–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?",
            "–ë—ã–ª –ª–∏ –æ–ø—ã—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∏ –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–ª–∏?"
        ]
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîç –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="free")],
        [InlineKeyboardButton("üí∞ –ü–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="paid")],
        [InlineKeyboardButton("üëë VIP —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ", callback_data="vip")],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Å—Å–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_TYPE

async def handle_session_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    session_type = query.data
    context.user_data["session_type"] = session_type
    context.user_data["answers"] = []
    context.user_data["current_question"] = 0

    intro = session_questions[session_type]["intro"]
    await query.message.reply_text(intro)
    await query.message.reply_text(session_questions[session_type]["questions"][0])
    return ANSWERING

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    session_type = context.user_data["session_type"]
    context.user_data["answers"].append(answer)

    current = context.user_data["current_question"] + 1
    context.user_data["current_question"] = current

    questions = session_questions[session_type]["questions"]
    if current < len(questions):
        await update.message.reply_text(questions[current])
        return ANSWERING

    summary = "\n".join(f"‚ñ™Ô∏è {q}\nüîπ {a}" for q, a in zip(questions, context.user_data["answers"]))
    await update.message.reply_text("üìù –í–æ—Ç, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏:\n" + summary)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
         InlineKeyboardButton("üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")]
    ]
    await update.message.reply_text("‚úÖ –≠—Ç–æ –≤–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRMING

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    session_type = context.user_data["session_type"]

    if query.data == "edit":
        context.user_data["answers"] = []
        context.user_data["current_question"] = 0
        await query.message.reply_text("üîÑ –û–∫, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥—ë–º –∑–∞–Ω–æ–≤–æ.")
        await query.message.reply_text(session_questions[session_type]["questions"][0])
        return ANSWERING

    if query.data == "confirm":
        user = query.from_user
        with app.app_context():
            client = Client.query.filter_by(telegram_id=user.id).first()
            if not client:
                client = Client(
                    telegram_id=user.id,
                    name=f"{user.first_name} {user.last_name or ''}".strip(),
                    initial_request=context.user_data["answers"][0],
                    username=user.username
                )
                db.session.add(client)
                db.session.commit()

            session = Session(
                client_id=client.id,
                session_type=session_type,
                answers_json={q: a for q, a in zip(session_questions[session_type]["questions"], context.user_data["answers"])},
                status="confirmed"
            )
            db.session.add(session)
            db.session.commit()

        await notify_admins(f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user.first_name} (@{user.username})")
        await query.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return ConversationHandler.END
